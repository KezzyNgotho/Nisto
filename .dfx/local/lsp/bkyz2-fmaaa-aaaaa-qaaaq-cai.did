type WalletPortfolio = 
 record {
   cryptoWallets: vec CryptoWallet;
   defiPositions: vec DeFiPosition;
   externalConnections: vec ExternalWalletConnection;
   fiatWallets: vec Wallet;
   lastUpdated: int;
   totalValueKES: float64;
   totalValueUSD: float64;
   userId: UserId;
 };
type Wallet = 
 record {
   balance: float64;
   createdAt: int;
   currency: text;
   id: text;
   isActive: bool;
   name: text;
   "type": text;
   updatedAt: int;
   userId: UserId;
 };
type VaultType = 
 variant {
   Business;
   Charity;
   Custom;
   Education;
   Emergency;
   Investment;
   Savings;
   Travel;
 };
type VaultTransaction = 
 record {
   amount: float64;
   currency: text;
   description: text;
   id: text;
   metadata: opt text;
   status: text;
   timestamp: int;
   "type": text;
   userId: UserId;
   vaultId: text;
 };
type VaultMessage = 
 record {
   content: text;
   editedAt: opt int;
   id: text;
   messageType: MessageType;
   metadata: opt text;
   reactions: vec MessageReaction;
   replyTo: opt text;
   status: MessageStatus;
   timestamp: int;
   userId: UserId;
   userName: text;
   vaultId: text;
 };
type VaultMember = 
 record {
   contributionLimit: opt float64;
   id: text;
   isActive: bool;
   joinedAt: int;
   permissions: vec text;
   role: text;
   userId: UserId;
   vaultId: text;
   withdrawalLimit: opt float64;
 };
type VaultChatRoom = 
 record {
   createdAt: int;
   description: opt text;
   id: text;
   isActive: bool;
   lastMessageAt: opt int;
   memberCount: nat;
   metadata: opt text;
   name: text;
   updatedAt: int;
   vaultId: text;
 };
type UserPreferences = 
 record {
   currency: text;
   language: text;
   notifications: NotificationSettings;
   privacy: PrivacySettings;
   security: SecuritySettings;
   theme: text;
 };
type UserId = principal;
type User = 
 record {
   avatar: opt text;
   createdAt: int;
   displayName: text;
   email: opt text;
   id: UserId;
   isActive: bool;
   isLocked: bool;
   lastLoginAt: opt int;
   loginAttempts: nat;
   preferences: UserPreferences;
   recoverySetupCompleted: bool;
   updatedAt: int;
   username: text;
 };
type TypingIndicator = 
 record {
   isTyping: bool;
   startedAt: int;
   userId: UserId;
   userName: text;
 };
type Transaction = 
 record {
   amount: float64;
   category: text;
   currency: text;
   description: text;
   id: text;
   metadata: opt text;
   status: text;
   timestamp: int;
   "type": text;
   userId: UserId;
   walletId: text;
 };
type TokenTransfer = 
 record {
   amount: nat;
   blockNumber: nat;
   from: UserId;
   id: text;
   timestamp: int;
   to: UserId;
   transactionHash: text;
 };
type TokenMint = 
 record {
   amount: nat;
   blockNumber: nat;
   id: text;
   reason: text;
   timestamp: int;
   to: UserId;
 };
type TokenMetadata = 
 record {
   burnAddress: UserId;
   circulatingSupply: nat;
   createdAt: int;
   decimals: nat8;
   isPaused: bool;
   maxTransactionLimit: nat;
   maxWalletLimit: nat;
   name: text;
   symbol: text;
   totalSupply: nat;
   treasuryAddress: UserId;
   updatedAt: int;
 };
type TokenBurn = 
 record {
   amount: nat;
   blockNumber: nat;
   from: UserId;
   id: text;
   reason: text;
   timestamp: int;
 };
type TokenBalance = 
 record {
   balance: nat;
   lastUpdated: int;
   lockedBalance: nat;
   owner: UserId;
   stakedBalance: nat;
 };
type StakingInfo = 
 record {
   isStaking: bool;
   lastRewardTime: int;
   stakedAmount: nat;
   stakingStartTime: int;
   totalRewardsEarned: nat;
   userId: UserId;
 };
type SocialGame = 
 record {
   createdAt: int;
   createdBy: UserId;
   currency: text;
   currentParticipants: nat;
   description: text;
   endTime: opt int;
   entryFee: opt float64;
   gameType: GameType;
   id: text;
   isPublic: bool;
   maxParticipants: opt nat;
   metadata: opt text;
   name: text;
   prizePool: float64;
   rules: opt text;
   startTime: int;
   status: GameStatus;
   updatedAt: int;
 };
type SimplePayment = 
 record {
   createdAt: int;
   exchangeRate: float64;
   id: text;
   localAmount: float64;
   localCurrency: text;
   location: opt text;
   paymentType: text;
   status: text;
   updatedAt: int;
   usdAmount: float64;
   userId: UserId;
 };
type SecuritySettings = 
 record {
   deviceTracking: bool;
   loginNotifications: bool;
   twoFactorEnabled: bool;
 };
type SecurityQuestion = 
 record {
   answerHash: text;
   createdAt: int;
   id: text;
   isActive: bool;
   question: text;
   userId: UserId;
 };
type Result_9 = 
 variant {
   err: text;
   ok: GameParticipant;
 };
type Result_8 = 
 variant {
   err: text;
   ok: Goal;
 };
type Result_75 = 
 variant {
   err: text;
   ok: EmergencyContact;
 };
type Result_74 = 
 variant {
   err: text;
   ok: Plugin;
 };
type Result_73 = 
 variant {
   err: text;
   ok: vec SecurityQuestion;
 };
type Result_72 = 
 variant {
   err: text;
   ok: GameReward;
 };
type Result_71 = 
 variant {
   err: text;
   ok: nat;
 };
type Result_70 = 
 variant {
   err: text;
   ok: record {
         instructions: text;
         userId: principal;
       };
 };
type Result_7 = 
 variant {
   err: text;
   ok: PaymentMethod;
 };
type Result_69 = 
 variant {
   err: text;
   ok: ExternalWalletConnection;
 };
type Result_68 = 
 variant {
   err: text;
   ok: Budget;
 };
type Result_67 = 
 variant {
   err: text;
   ok: GroupVault;
 };
type Result_66 = 
 variant {
   err: text;
   ok: Transaction;
 };
type Result_65 = 
 variant {
   err: text;
   ok: VaultChatRoom;
 };
type Result_64 = 
 variant {
   err: text;
   ok: SocialGame;
 };
type Result_63 = 
 variant {
   err: text;
   ok:
    record {
      averageConfidence: float64;
      implementedRecommendations: nat;
      totalInsights: nat;
      totalMessages: nat;
      totalRecommendations: nat;
    };
 };
type Result_62 = 
 variant {
   err: text;
   ok: vec AIMessage;
 };
type Result_61 = 
 variant {
   err: text;
   ok: vec PaybillBill;
 };
type Result_60 = 
 variant {
   err: text;
   ok:
    record {
      activeWallets: nat;
      goalsProgress: float64;
      monthlySpent: float64;
      totalBalance: float64;
    };
 };
type Result_6 = 
 variant {
   err: text;
   ok: CryptoTransaction;
 };
type Result_59 = 
 variant {
   err: text;
   ok:
    record {
      activeProtocols: vec text;
      averageApy: float64;
      totalPositions: nat;
      totalRewards: float64;
      totalValue: float64;
    };
 };
type Result_58 = 
 variant {
   err: text;
   ok:
    record {
      averageApy: float64;
      totalPositions: nat;
      totalUsers: nat;
      totalVolume: float64;
    };
 };
type Result_57 = 
 variant {
   err: text;
   ok: vec record {
             text;
             text;
           };
 };
type Result_56 = 
 variant {
   err: text;
   ok: vec DepositTransaction;
 };
type Result_55 = 
 variant {
   err: text;
   ok: WalletPortfolio;
 };
type Result_54 = 
 variant {
   err: text;
   ok: vec GameParticipant;
 };
type Result_53 = 
 variant {
   err: text;
   ok: vec PaybillTransaction;
 };
type Result_52 = 
 variant {
   err: text;
   ok: vec PaymentService;
 };
type Result_51 = 
 variant {
   err: text;
   ok:
    record {
      successRate: float64;
      topProvider: opt text;
      totalAmount: float64;
      totalFees: float64;
      totalPayments: nat;
    };
 };
type Result_50 = 
 variant {
   err: text;
   ok: vec TypingIndicator;
 };
type Result_5 = 
 variant {
   err: text;
   ok: bool;
 };
type Result_49 = 
 variant {
   err: text;
   ok: float64;
 };
type Result_48 = 
 variant {
   err: text;
   ok: vec AIInsight;
 };
type Result_47 = 
 variant {
   err: text;
   ok: vec AIRecommendation;
 };
type Result_46 = 
 variant {
   err: text;
   ok: vec AuditLog;
 };
type Result_45 = 
 variant {
   err: text;
   ok: vec Budget;
 };
type Result_44 = 
 variant {
   err: text;
   ok: vec ChatNotification;
 };
type Result_43 = 
 variant {
   err: text;
   ok: vec CryptoWallet;
 };
type Result_42 = 
 variant {
   err: text;
   ok: vec DeFiPosition;
 };
type Result_41 = 
 variant {
   err: text;
   ok: vec DeFiTransaction;
 };
type Result_40 = 
 variant {
   err: text;
   ok: vec ExternalWalletConnection;
 };
type Result_4 = 
 variant {
   err: text;
   ok: User;
 };
type Result_39 = 
 variant {
   err: text;
   ok: vec GameReward;
 };
type Result_38 = 
 variant {
   err: text;
   ok: vec SocialGame;
 };
type Result_37 = 
 variant {
   err: text;
   ok: vec Goal;
 };
type Result_36 = 
 variant {
   err: text;
   ok: vec GroupVault;
 };
type Result_35 = 
 variant {
   err: text;
   ok: vec LocalPayment;
 };
type Result_34 = 
 variant {
   err: text;
   ok: vec OTPRequest;
 };
type Result_33 = 
 variant {
   err: text;
   ok: vec PaymentMethod;
 };
type Result_32 = 
 variant {
   err: text;
   ok: vec RecoveryMethod;
 };
type Result_31 = 
 variant {
   err: text;
   ok: vec SimplePayment;
 };
type Result_30 = 
 variant {
   err: text;
   ok: vec Transaction;
 };
type Result_3 = 
 variant {
   err: text;
   ok: record {
         purpose: text;
         recipient: text;
         verified: bool;
       };
 };
type Result_29 = 
 variant {
   err: text;
   ok:
    record {
      accountIdentifier: text;
      allAddresses: vec text;
      cryptoAddresses: vec record {
                             text;
                             text;
                           };
      principalId: text;
    };
 };
type Result_28 = 
 variant {
   err: text;
   ok: vec Wallet;
 };
type Result_27 = 
 variant {
   err: text;
   ok: vec ChatMember;
 };
type Result_26 = 
 variant {
   err: text;
   ok:
    record {
      members: vec VaultMember;
      transactions: vec VaultTransaction;
      vault: GroupVault;
    };
 };
type Result_25 = 
 variant {
   err: text;
   ok: vec VaultMessage;
 };
type Result_24 = 
 variant {
   err: text;
   ok: Wallet;
 };
type Result_23 = 
 variant {
   err: text;
   ok: vec CryptoTransaction;
 };
type Result_22 = 
 variant {
   err: text;
   ok:
    record {
      message: text;
      recoveryRequestId: text;
      securityQuestions: opt vec record {
                                   text;
                                   text;
                                 };
    };
 };
type Result_21 = 
 variant {
   err: text;
   ok: VaultMember;
 };
type Result_20 = 
 variant {
   err: text;
   ok: AIRecommendation;
 };
type Result_2 = 
 variant {
   err: text;
   ok: text;
 };
type Result_19 = 
 variant {
   err: text;
   ok: DepositTransaction;
 };
type Result_18 = 
 variant {
   err: text;
   ok: PaybillTransaction;
 };
type Result_17 = 
 variant {
   err: text;
   ok: LocalPayment;
 };
type Result_16 = 
 variant {
   err: text;
   ok: SimplePayment;
 };
type Result_15 = 
 variant {
   err: text;
   ok: DeFiTransaction;
 };
type Result_14 = 
 variant {
   err: text;
   ok: AIMessage;
 };
type Result_13 = 
 variant {
   err: text;
   ok: record {
         expiresIn: int;
         message: text;
         otpId: text;
       };
 };
type Result_12 = 
 variant {
   err: text;
   ok: VaultMessage;
 };
type Result_11 = 
 variant {
   err: text;
   ok: CryptoWallet;
 };
type Result_10 = 
 variant {
   err: text;
   ok: DeFiPosition;
 };
type Result_1 = 
 variant {
   err: text;
   ok: RecoveryMethod;
 };
type Result = 
 variant {
   err: text;
   ok: VaultTransaction;
 };
type RecoveryRequest = 
 record {
   completedAt: opt int;
   createdAt: int;
   expiresAt: int;
   id: text;
   identifier: text;
   metadata: opt text;
   recoveryMethod: text;
   recoveryToken: opt text;
   status: text;
   userId: opt UserId;
   verificationCode: opt text;
   verifiedAt: opt int;
 };
type RecoveryMethod = 
 record {
   createdAt: int;
   id: text;
   isActive: bool;
   isVerified: bool;
   metadata: opt text;
   methodType: text;
   userId: UserId;
   value: text;
   verifiedAt: opt int;
 };
type PrivacySettings = 
 record {
   allowFriendRequests: bool;
   profileVisibility: text;
   transactionVisibility: text;
 };
type PluginStatus = 
 variant {
   Active;
   Deprecated;
   Inactive;
   Pending;
   Suspended;
 };
type PluginPermission = 
 variant {
   ExternalAPIs;
   Notifications;
   ReadContacts;
   ReadProfile;
   ReadTransactions;
   ReadWallets;
   WriteContacts;
   WriteProfile;
   WriteTransactions;
   WriteWallets;
 };
type PluginCategory = 
 variant {
   Custom;
   Education;
   Entertainment;
   Finance;
   Gaming;
   Health;
   Productivity;
   Social;
 };
type Plugin = 
 record {
   author: text;
   category: PluginCategory;
   configSchema: opt text;
   createdAt: int;
   description: text;
   entryPoint: text;
   icon: opt text;
   id: text;
   installCount: nat;
   isEnabled: bool;
   isInstalled: bool;
   metadata: opt text;
   name: text;
   permissions: vec PluginPermission;
   rating: float64;
   status: PluginStatus;
   updatedAt: int;
   version: text;
 };
type PaymentStatus = 
 variant {
   Cancelled;
   Completed;
   Failed;
   Pending;
   Processing;
   Refunded;
 };
type PaymentService = 
 record {
   accountType: text;
   color: text;
   description: text;
   icon: text;
   id: text;
   name: text;
   paybillNumber: text;
   requiresPaybill: bool;
   status: text;
 };
type PaymentProvider = 
 variant {
   AirtelMoney;
   BankTransfer;
   Card;
   Custom;
   Equitel;
   Mpesa;
   PayPal;
 };
type PaymentMethod = 
 record {
   accountName: text;
   accountNumber: opt text;
   createdAt: int;
   id: text;
   isActive: bool;
   isDefault: bool;
   metadata: opt text;
   phoneNumber: opt text;
   provider: PaymentProvider;
   userId: UserId;
 };
type PaybillTransaction = 
 record {
   accountReference: text;
   billId: text;
   completedAt: opt int;
   createdAt: int;
   id: text;
   kesAmount: float64;
   mpesaReceipt: opt text;
   mpesaTransactionId: opt text;
   paybillNumber: text;
   phoneNumber: text;
   status: text;
   updatedAt: int;
   usdtAmount: float64;
   userId: UserId;
 };
type PaybillPaymentRequest = 
 record {
   accountReference: text;
   billId: text;
   kesAmount: float64;
   paybillNumber: text;
   phoneNumber: text;
   usdtAmount: float64;
 };
type PaybillBill = 
 record {
   accountType: text;
   createdAt: int;
   description: text;
   icon: text;
   id: text;
   name: text;
   paybillNumber: text;
   status: text;
 };
type OTPRequest = 
 record {
   attempts: nat;
   code: text;
   createdAt: int;
   deliveredAt: opt int;
   expiresAt: int;
   id: text;
   metadata: opt text;
   provider: text;
   purpose: text;
   recipient: text;
   sentAt: opt int;
   "service": text;
   status: text;
   userId: opt UserId;
 };
type NotificationSettings = 
 record {
   email: bool;
   goals: bool;
   push: bool;
   security: bool;
   social: bool;
   transactions: bool;
 };
type MessageType = 
 variant {
   File;
   Image;
   Reaction;
   System;
   Text;
   Transaction;
 };
type MessageStatus = 
 variant {
   Delivered;
   Failed;
   Read;
   Sent;
 };
type MessageReaction = 
 record {
   reaction: text;
   timestamp: int;
   userId: UserId;
 };
type LocalPayment = 
 record {
   amount: float64;
   completedAt: opt int;
   currency: text;
   fee: float64;
   id: text;
   metadata: opt text;
   provider: PaymentProvider;
   recipientName: opt text;
   recipientPhone: opt text;
   reference: opt text;
   status: PaymentStatus;
   timestamp: int;
   "type": text;
   userId: UserId;
 };
type GroupVault = 
 record {
   createdAt: int;
   currency: text;
   description: opt text;
   id: text;
   isActive: bool;
   isPublic: bool;
   members: vec text;
   metadata: opt text;
   name: text;
   ownerId: UserId;
   rules: opt text;
   targetAmount: opt float64;
   totalBalance: float64;
   updatedAt: int;
   vaultType: VaultType;
 };
type Goal = 
 record {
   category: text;
   createdAt: int;
   currency: text;
   currentAmount: float64;
   description: text;
   id: text;
   isAchieved: bool;
   isActive: bool;
   targetAmount: float64;
   targetDate: opt int;
   title: text;
   updatedAt: int;
   userId: UserId;
 };
type GameType = 
 variant {
   Challenge;
   Custom;
   Lottery;
   Prediction;
   Quiz;
   Tournament;
   Trading;
 };
type GameStatus = 
 variant {
   Active;
   Cancelled;
   Completed;
   Paused;
 };
type GameReward = 
 record {
   amount: float64;
   claimedAt: opt int;
   currency: opt text;
   description: text;
   expiresAt: opt int;
   gameId: text;
   id: text;
   metadata: opt text;
   "type": text;
   userId: UserId;
 };
type GameParticipant = 
 record {
   gameId: text;
   id: text;
   isActive: bool;
   joinedAt: int;
   metadata: opt text;
   rank: opt nat;
   score: float64;
   userId: UserId;
 };
type ExternalWalletConnection = 
 record {
   address: opt text;
   connectedAt: int;
   id: text;
   isActive: bool;
   lastUsedAt: int;
   permissions: vec text;
   principalId: opt text;
   userId: UserId;
   walletType: text;
 };
type EmergencyContact = 
 record {
   createdAt: int;
   email: text;
   id: text;
   isVerified: bool;
   name: text;
   relationship: text;
   userId: UserId;
   verifiedAt: opt int;
 };
type DepositTransaction = 
 record {
   completedAt: opt int;
   conversionRate: float64;
   createdAt: int;
   id: text;
   kesAmount: float64;
   mpesaReceipt: opt text;
   mpesaTransactionId: opt text;
   phoneNumber: text;
   status: text;
   updatedAt: int;
   usdtAmount: float64;
   userId: UserId;
 };
type DepositRequest = 
 record {
   conversionRate: float64;
   kesAmount: float64;
   phoneNumber: text;
   usdtAmount: float64;
 };
type DeFiTransaction = 
 record {
   amountA: float64;
   amountB: opt float64;
   fee: float64;
   id: text;
   metadata: opt text;
   protocol: DeFiProtocol;
   status: text;
   timestamp: int;
   tokenA: text;
   tokenB: opt text;
   txHash: opt text;
   "type": text;
   userId: UserId;
 };
type DeFiProtocol = 
 variant {
   Custom;
   ICDex;
   ICPSwap;
   InfinitySwap;
   Neutrinite;
   Sonic;
 };
type DeFiProductType = 
 variant {
   Borrowing;
   Custom;
   Governance;
   Lending;
   Liquidity;
   Staking;
   Swap;
   YieldFarming;
 };
type DeFiPosition = 
 record {
   amount: float64;
   apy: float64;
   createdAt: int;
   id: text;
   isActive: bool;
   metadata: opt text;
   productType: DeFiProductType;
   protocol: DeFiProtocol;
   rewards: float64;
   tokenA: text;
   tokenB: opt text;
   updatedAt: int;
   userId: UserId;
 };
type CryptoWalletType = 
 variant {
   ALPACALB;
   BOOM;
   CAT;
   CHAT;
   CKPEPE;
   CLOWN;
   CYCLES;
   DAMONIC;
   DKUMA;
   DOGMI;
   DRAGGINZ;
   DSCVR;
   ELNA;
   FIAT;
   FOMO;
   GHOST;
   GLDT;
   ICP;
   KINIC;
   MEME;
   MOD;
   MOTOKO;
   NANAS;
   NICP;
   NTN;
   OPENCHAT;
   PANDA;
   PARTY;
   SEERS;
   SHRIMP;
   SNEED;
   SNS1;
   SONIC;
   TRAX;
   WUMBO;
   YUGE;
   ckBTC;
   ckETH;
 };
type CryptoWallet = 
 record {
   address: opt text;
   balance: float64;
   createdAt: int;
   currency: text;
   externalWalletType: opt text;
   id: text;
   isActive: bool;
   isExternal: bool;
   lastSyncAt: opt int;
   metadata: opt text;
   name: text;
   updatedAt: int;
   userId: UserId;
   walletType: CryptoWalletType;
 };
type CryptoTransaction = 
 record {
   amount: float64;
   blockHeight: opt nat;
   currency: text;
   fee: float64;
   fromAddress: opt text;
   id: text;
   metadata: opt text;
   status: text;
   timestamp: int;
   toAddress: opt text;
   txHash: opt text;
   "type": text;
   userId: UserId;
   walletId: text;
 };
type ChatNotification = 
 record {
   body: text;
   id: text;
   isRead: bool;
   metadata: opt text;
   notificationType: text;
   timestamp: int;
   title: text;
   userId: UserId;
   vaultId: text;
 };
type ChatMember = 
 record {
   isMuted: bool;
   isTyping: bool;
   joinedAt: int;
   lastSeenAt: int;
   role: text;
   typingSince: opt int;
   unreadCount: nat;
   userId: UserId;
   userName: text;
 };
type Budget = 
 record {
   amount: float64;
   category: text;
   endDate: int;
   id: text;
   isActive: bool;
   name: text;
   period: text;
   spent: float64;
   startDate: int;
   userId: UserId;
 };
type AuditLog = 
 record {
   action: text;
   details: text;
   id: text;
   ipAddress: opt text;
   success: bool;
   timestamp: int;
   userAgent: opt text;
   userId: opt UserId;
 };
type AIRecommendation = 
 record {
   category: text;
   createdAt: int;
   description: text;
   estimatedImpact: float64;
   id: text;
   isImplemented: bool;
   metadata: opt text;
   priority: text;
   title: text;
   userId: UserId;
 };
type AIMessageType = 
 variant {
   Assistant;
   Error;
   System;
   User;
 };
type AIMessage = 
 record {
   content: text;
   id: text;
   metadata: opt text;
   timestamp: int;
   "type": AIMessageType;
   userId: UserId;
 };
type AIInsight = 
 record {
   actionable: bool;
   confidence: float64;
   createdAt: int;
   description: text;
   id: text;
   metadata: opt text;
   title: text;
   "type": text;
   userId: UserId;
 };
service : {
  addEmergencyContact: (text, text, text) -> (Result_75);
  addPaymentMethod: (text, opt text, opt text, text, bool) -> (Result_7);
  addPlugin: (Plugin) -> (Result_74);
  addRecoveryMethod: (text, text, opt text) -> (Result_1);
  addSecurityQuestions: (vec record {
                               text;
                               text;
                             }) -> (Result_73);
  allowance: (UserId, UserId) -> (nat) query;
  approve: (UserId, nat) -> (Result_5);
  awardGameReward: (text, UserId, text, float64, opt text, text) ->
   (Result_72);
  balanceOf: (UserId) -> (nat) query;
  burn: (nat, text) -> (Result_5);
  calculateDefiRewards: (text) -> (Result_49);
  cancelPayment: (text) -> (Result_17);
  claimGameReward: (text) -> (Result_72);
  claimRewards: () -> (Result_71);
  closeDefiPosition: (text) -> (Result_10);
  completeRecovery: (text, opt text) -> (Result_70);
  completeRecoverySetup: () -> (Result_4);
  connectExternalWallet: (text, opt text, opt text, vec text) -> (Result_69);
  createBudget: (text, text, float64, text, int, int) -> (Result_68);
  createCryptoTransaction: (text, text, float64, opt text, opt text,
   opt text, float64) -> (Result_6);
  createCryptoWallet: (text, text, bool, opt text, opt text) -> (Result_11);
  createDeFiPosition: (text, text, text, opt text, float64, float64) ->
   (Result_10);
  createDefiPosition: (text, text, text, opt text, float64, float64) ->
   (Result_10);
  createGoal: (text, text, float64, text, opt int, text) -> (Result_8);
  createGroupVault: (text, opt text, text, text, opt float64, bool,
   opt text) -> (Result_67);
  createSocialGame: (text, text, text, int, opt int, opt nat, opt float64,
   float64, text, opt text, bool) -> (Result_64);
  createTransaction: (text, text, float64, text, text) -> (Result_66);
  createUser: (text, text, opt text) -> (Result_4);
  createVaultChatRoom: (text, text, opt text) -> (Result_65);
  createWallet: (text, text, text) -> (Result_24);
  depositToVault: (text, float64, opt text) -> (Result);
  endGame: (text) -> (Result_64);
  generateAIInsights: () -> (Result_48);
  generateAIRecommendations: () -> (Result_47);
  generateDepositAddress: (text) -> (Result_2);
  getAIAnalytics: () -> (Result_63);
  getAIConversationHistory: () -> (Result_62);
  getAvailableBills: () -> (Result_61);
  getAvailableGames: () -> (Result_38);
  getBurnHistory: (nat, nat) -> (vec TokenBurn) query;
  getDashboardStats: () -> (Result_60) query;
  getDefiAnalytics: () -> (Result_59);
  getDefiPositionsByProductType: (text) -> (Result_42);
  getDefiPositionsByProtocol: (text) -> (Result_42);
  getDefiProtocolStats: (text) -> (Result_58);
  getDefiTransactionsByProtocol: (text) -> (Result_41);
  getDepositAddress: (text) -> (Result_2);
  getDepositAddresses: () -> (Result_57);
  getDepositHistory: () -> (Result_56);
  getDepositTransactionById: (text) -> (Result_19);
  getFullWalletPortfolio: () -> (Result_55);
  getGameLeaderboard: (text) -> (Result_54);
  getGamesByType: (text) -> (Result_38);
  getMintHistory: (nat, nat) -> (vec TokenMint) query;
  getPaybillTransactionById: (text) -> (Result_18);
  getPaybillTransactionHistory: () -> (Result_53);
  getPaymentById: (text) -> (Result_16);
  getPaymentServices: () -> (Result_52);
  getPaymentStats: () -> (Result_51);
  getPaymentsByProvider: (text) -> (Result_35);
  getPrincipalId: () -> (text) query;
  getRecoveryRequestStatus: (text) -> (opt RecoveryRequest) query;
  getStakingInfo: (UserId) -> (opt StakingInfo) query;
  getSystemStats: () ->
   (record {
      totalCryptoTransactions: nat;
      totalCryptoWallets: nat;
      totalDeFiPositions: nat;
      totalExternalConnections: nat;
      totalOTPRequests: nat;
      totalRecoveryMethods: nat;
      totalRecoveryRequests: nat;
      totalTransactions: nat;
      totalUsers: nat;
      totalWallets: nat;
    }) query;
  getTokenMetadata: () -> (TokenMetadata) query;
  getTotalBalance: (UserId) -> (TokenBalance) query;
  getTotalStaked: () -> (nat) query;
  getTransferHistory: (nat, nat) -> (vec TokenTransfer) query;
  getTypingIndicators: (text) -> (Result_50);
  getUSDTtoKESRate: () -> (Result_49);
  getUser: () -> (Result_4) query;
  getUserAIInsights: () -> (Result_48);
  getUserAIRecommendations: () -> (Result_47);
  getUserAuditLogs: () -> (Result_46);
  getUserBudgets: () -> (Result_45) query;
  getUserByEmail: (text) -> (opt UserId) query;
  getUserByPhone: (text) -> (opt UserId) query;
  getUserChatNotifications: (nat, nat) -> (Result_44);
  getUserCryptoTransactions: () -> (Result_23);
  getUserCryptoWallets: () -> (Result_43) query;
  getUserDeFiPositions: () -> (Result_42);
  getUserDefiPositions: () -> (Result_42);
  getUserDefiTransactions: () -> (Result_41);
  getUserExternalConnections: () -> (Result_40);
  getUserGameRewards: () -> (Result_39);
  getUserGames: () -> (Result_38);
  getUserGoals: () -> (Result_37) query;
  getUserGroupVaults: () -> (Result_36);
  getUserLocalPaymentHistory: () -> (Result_35);
  getUserOTPRequests: () -> (Result_34);
  getUserPaymentMethods: () -> (Result_33);
  getUserRecoveryMethods: () -> (Result_32) query;
  getUserSimplePaymentHistory: () -> (Result_31);
  getUserTransactions: () -> (Result_30) query;
  getUserWalletAddresses: () -> (Result_29);
  getUserWallets: () -> (Result_28) query;
  getVaultChatMembers: (text) -> (Result_27);
  getVaultDetails: (text) -> (Result_26);
  getVaultMessages: (text, nat, nat) -> (Result_25);
  getWallet: (text) -> (Result_24);
  getWalletByAddress: (text) -> (opt text) query;
  getWalletTransactionHistory: (text, nat, nat) -> (Result_23);
  greet: (text) -> (text) query;
  initiateLocalPayment: (text, text, float64, text, opt text, opt text,
   opt text) -> (Result_17);
  initiateRecovery: (text, text) -> (Result_22);
  inviteToVault: (text, UserId, text) -> (Result_21);
  joinGame: (text) -> (Result_9);
  joinVault: (text) -> (Result_21);
  joinVaultChat: (text, text) -> (Result_5);
  leaveVaultChat: (text) -> (Result_5);
  linkRecoveredAccount: (text, principal) -> (Result_4);
  loginOrCreateUser: () -> (Result_4);
  markMessagesAsRead: (text, vec text) -> (Result_5);
  markRecommendationImplemented: (text) -> (Result_20);
  mint: (UserId, nat, text) -> (Result_5);
  processDeposit: (DepositRequest) -> (Result_19);
  processPaybillPayment: (PaybillPaymentRequest) -> (Result_18);
  processPayment: (text) -> (Result_17);
  processSimplePayment: (text, float64, text, float64, float64, opt text) ->
   (Result_16);
  recordDefiTransaction: (text, text, text, opt text, float64, opt float64,
   float64, opt text) -> (Result_15);
  regenerateWalletAddress: (text) -> (Result_2);
  removePaymentMethod: (text) -> (Result_5);
  sendAIMessage: (text) -> (Result_14);
  sendCrypto: (text, text, float64, opt text) -> (Result_6);
  sendOTP: (text, text, text, text) -> (Result_13);
  sendVaultMessage: (text, text, MessageType, opt text) -> (Result_12);
  sendVerificationCode: (text, text) -> (Result_2);
  setPaused: (bool) -> (Result_5);
  setStakingRewardRate: (float64) -> (Result_5);
  setTransactionLimits: (nat, nat) -> (Result_5);
  setTreasuryAddress: (UserId) -> (Result_5);
  stake: (nat) -> (Result_5);
  transfer: (UserId, nat) -> (Result_5);
  transferBetweenWallets: (text, text, float64, opt text) -> (Result_6);
  transferFrom: (UserId, UserId, nat) -> (Result_5);
  unstake: (nat) -> (Result_5);
  updateCryptoWalletBalance: (text, float64) -> (Result_11);
  updateDefiPosition: (text, float64, float64, float64) -> (Result_10);
  updateGameScore: (text, float64) -> (Result_9);
  updateGoalProgress: (text, float64) -> (Result_8);
  updatePaymentMethod: (text, opt text, opt text, text, bool) -> (Result_7);
  updateTransactionStatus: (text, text, opt text, opt nat) -> (Result_6);
  updateTypingStatus: (text, bool) -> (Result_5);
  updateUser: (opt text, opt text) -> (Result_4);
  userExists: () -> (bool);
  validateAddress: (text, text) -> (bool) query;
  verifyCode: (text, text, text) -> (Result_2);
  verifyOTP: (text, text) -> (Result_3);
  verifyRecovery: (text, opt text, opt vec record {
                                             text;
                                             text;
                                           }) -> (Result_2);
  verifyRecoveryMethod: (text, text, text) -> (Result_1);
  withdrawFromVault: (text, float64, opt text) -> (Result);
}
